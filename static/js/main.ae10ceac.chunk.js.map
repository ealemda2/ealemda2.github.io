{"version":3,"sources":["Scene.js","serviceWorker.js","index.js"],"names":["Scene","props","state","Engine","Matter","Render","World","Bodies","Mouse","MouseConstraint","engine","create","render","element","this","refs","scene","options","width","height","wireframes","ballA","circle","restitution","ballB","add","world","rectangle","isStatic","mouse","canvas","mouseConstraint","constraint","stiffness","visible","Events","on","event","Math","random","run","ref","React","Component","Boolean","window","location","hostname","match","App","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAgFeA,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,gEAMjB,IAAMC,EAASC,IAAOD,OACpBE,EAASD,IAAOC,OAChBC,EAAQF,IAAOE,MACfC,EAASH,IAAOG,OAChBC,EAAQJ,IAAOI,MACfC,EAAkBL,IAAOK,gBAErBC,EAASP,EAAOQ,OAAO,IAIvBC,EAASP,EAAOM,OAAO,CAC3BE,QAASC,KAAKC,KAAKC,MACnBN,OAAQA,EACRO,QAAS,CACPC,MAAO,KACPC,OAAQ,IACRC,YAAY,KAIVC,EAAQd,EAAOe,OAAO,IAAK,IAAK,GAAI,CAAEC,YAAa,KACnDC,EAAQjB,EAAOe,OAAO,IAAK,GAAI,GAAI,CAAEC,YAAa,KACxDjB,EAAMmB,IAAIf,EAAOgB,MAAO,CAEtBnB,EAAOoB,UAAU,IAAK,EAAG,IAAK,GAAI,CAAEC,UAAU,IAC9CrB,EAAOoB,UAAU,IAAK,IAAK,IAAK,GAAI,CAAEC,UAAU,IAChDrB,EAAOoB,UAAU,IAAK,IAAK,GAAI,IAAK,CAAEC,UAAU,IAChDrB,EAAOoB,UAAU,EAAG,IAAK,GAAI,IAAK,CAAEC,UAAU,MAGhDtB,EAAMmB,IAAIf,EAAOgB,MAAO,CAACL,EAAOG,IAGhC,IAAMK,EAAQrB,EAAMG,OAAOC,EAAOkB,QAChCC,EAAkBtB,EAAgBE,OAAOD,EAAQ,CAC/CmB,MAAOA,EACPG,WAAY,CACVC,UAAW,GACXrB,OAAQ,CACNsB,SAAS,MAKjB5B,EAAMmB,IAAIf,EAAOgB,MAAOK,GAExB3B,IAAO+B,OAAOC,GAAGL,EAAiB,aAAa,SAAUM,GAC1CC,KAAKC,UACN,GACVjC,EAAMmB,IACJf,EAAOgB,MACPnB,EAAOe,OAAO,IAAK,GAAI,GAAI,CAAEC,YAAa,MAG5CjB,EAAMmB,IACJf,EAAOgB,MACPnB,EAAOoB,UAAU,IAAK,GAAI,GAAI,GAAI,CAAEJ,YAAa,SAKvDpB,EAAOqC,IAAI9B,GACXL,EAAOmC,IAAI5B,K,+BAIX,OAAO,yBAAK6B,IAAI,c,GA1EAC,IAAMC,WCSNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAM,kBACV,6BACE,kBAAC,EAAD,QAIJC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAGFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ae10ceac.chunk.js","sourcesContent":["import React from \"react\";\nimport Matter from \"matter-js\";\n\nclass Scene extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const Engine = Matter.Engine,\n      Render = Matter.Render,\n      World = Matter.World,\n      Bodies = Matter.Bodies,\n      Mouse = Matter.Mouse,\n      MouseConstraint = Matter.MouseConstraint;\n\n    const engine = Engine.create({\n      // positionIterations: 20\n    });\n\n    const render = Render.create({\n      element: this.refs.scene,\n      engine: engine,\n      options: {\n        width: 1500,\n        height: 600,\n        wireframes: false,\n      },\n    });\n\n    const ballA = Bodies.circle(210, 100, 30, { restitution: 0.5 });\n    const ballB = Bodies.circle(110, 50, 30, { restitution: 0.5 });\n    World.add(engine.world, [\n      // walls\n      Bodies.rectangle(200, 0, 600, 50, { isStatic: true }),\n      Bodies.rectangle(200, 600, 600, 50, { isStatic: true }),\n      Bodies.rectangle(500, 300, 50, 600, { isStatic: true }),\n      Bodies.rectangle(0, 300, 50, 600, { isStatic: true }),\n    ]);\n\n    World.add(engine.world, [ballA, ballB]);\n\n    // add mouse control\n    const mouse = Mouse.create(render.canvas),\n      mouseConstraint = MouseConstraint.create(engine, {\n        mouse: mouse,\n        constraint: {\n          stiffness: 0.2,\n          render: {\n            visible: false,\n          },\n        },\n      });\n\n    World.add(engine.world, mouseConstraint);\n\n    Matter.Events.on(mouseConstraint, \"mousedown\", function (event) {\n      const rand = Math.random();\n      if (rand >= 0.5) {\n        World.add(\n          engine.world,\n          Bodies.circle(150, 50, 30, { restitution: 0.7 })\n        );\n      } else {\n        World.add(\n          engine.world,\n          Bodies.rectangle(150, 50, 30, 15, { restitution: 0.7 })\n        );\n      }\n    });\n\n    Engine.run(engine);\n    Render.run(render);\n  }\n\n  render() {\n    return <div ref=\"scene\" />;\n  }\n}\nexport default Scene;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Scene from \"./Scene\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst App = () => (\n  <div>\n    <Scene />\n  </div>\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}